/**
 * Copyright 2015 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
*/
//
// Licensed Materials - Property of IBM
// Â© Copyright IBM Corp. 2015
//
apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'com.ibm.cscc.tutorial.Consumer'
sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '0.1'
jar.baseName = 'cscc-tutorial-messagehub-consumer'

repositories {
    mavenCentral()

    // Read from lib/ directory
    flatDir {
        dirs 'lib'
    }
}


// provided dependencies will not be built into jar, compiled ones will
configurations {
    provided
    compile.extendsFrom provided
}


// Compile tools.jar and all jars in lib folder as dependencies
dependencies {
    compile 'org.apache.kafka:kafka-clients:0.9.0.0'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-log4j12:1.7.6'
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
    compile 'org.apache.commons:commons-csv:1.2'
    //compile 'com.fasterxml.jackson.core:jackson-databind:2.7.0-rc1'
    compile fileTree(dir: 'lib-message-hub', include: ['*.jar'])
}


// Compile source code
compileJava {
    doFirst {
        copy {
            from configurations.runtime
            into 'lib'
        }

        copy {
          from 'lib-message-hub'
          into 'lib'
        }
    }

    source = 'src'
    options.encoding = 'ISO-8859-1'
}


// Create the output JAR file.
jar {

    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    // include all config files from resources
    from('resources') {
      include '*'
    }


    // Provide Main-Class so the JAR executes properly, along with the required classpath data.
    manifest {
        attributes('Main-Class': mainClassName)
    }
}


// Save JAR in build directory.
uploadArchives {
    repositories {
        flatDir {
            dirs 'build'
        }
    }
}


['Zip', 'Tar'].each { suffix ->
    "dist$suffix" {
        def basePath = baseName + '-' + version

        from('resources') {
            into { basePath + '/bin/resources' }
            exclude 'log4j.properties'
        }

        from('resources') {
            into { basePath + '/lib' }
            include 'log4j.properties'
        }
    }
}
